/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SAATS.java
 *
 * Created on 23/06/2012, 12:08:37 PM
 */
package saats;

/**
 *
 * @author misayo
 */
public class SAATS extends javax.swing.JFrame {
    /** Creates new form SAATS */
    public SAATS() {
        java.io.File file = null;
        boolean fecha = false;
        try{
            file = new java.io.File (System.getProperty("user.home")+"/SAATS.ico");
            java.io.InputStream is = getClass().getResourceAsStream("/sri/Registro");
            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
            // Lectura del fichero
            String linea;
            while((linea=br.readLine())!=null)
                fecha = saats.validaciones.Validacion.fecha(linea, "yyyy-MM-dd").getTime() > 
                        saats.validaciones.Validacion.fecha(saats.validaciones.Validacion.fechaSistema("yyyy-MM-dd"), "yyyy-MM-dd").getTime();
        }catch(Exception e){
            javax.swing.JOptionPane.showMessageDialog(this, "Existe problemas con el sistema, consulte con su proveedor del SAATS..");
            e.printStackTrace();
        } finally{
            if(fecha && file.exists()){
                initComponents();
//                java.util.List<String> lista = new java.util.ArrayList();
//                lista.add("Acerca de..");
//                lista.add("Autores");
//                lista.add("Ricardo Aguilar");
//                lista.add("Misael Fernandez");
//                sri.validaciones.PresentarInformacion.presentarInformacion(lista, this);
//                fichero = new java.io.FileWriter(System.getProperty("user.home") + "/comprobacion");
//                pw = new java.io.PrintWriter(fichero);
            }else {
                javax.swing.JOptionPane.showMessageDialog(this, "Existe problemas con el sistema, consulte con su proveedor del SAATS..");
                System.exit(0);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnImportar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbtnImportar.setText("<html>Generar<br><center>ATS</center></html>");
        jbtnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnImportarActionPerformed(evt);
            }
        });

        jLabel1.setText("SAATS");

        jLabel2.setText("Sistema Automatizado para ATS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jbtnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(81, 81, 81)
                .addComponent(jbtnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    java.util.List lineas = null;
    private void importar(String ruta) throws Exception {
        //Read an Excel File and Store in a Vector
        java.util.Vector dataHolder = saats.validaciones.Excel.leerExcel(ruta);
        lineas = saats.validaciones.Excel.convertirCellDataToArrayList(dataHolder);
        agrupar();
    }
    
    private void agrupar () throws Exception{
        java.util.List lineasAgruparFinal = new java.util.ArrayList();
        java.util.List lineasAgruparAnuladas = new java.util.ArrayList();
        java.util.List<VentasRepetidas> ventasRepetidases = new java.util.ArrayList();
        lineasAgruparFinal.add(lineas.get(2));
//        String establecimiento = ((java.util.List)lineas.get(0)).get(0).toString();
        ventasRepetidases.add(new VentasRepetidas(((java.util.List)lineas.get(2)).get(3).toString(), 1));
        
        int contador = 0;
        boolean encontro = false;
        for (int i = 3; i < lineas.size(); i++){
            contador = 0;
            for (int j = 0; j < lineasAgruparFinal.size(); j++){
                if(!((java.util.List)lineas.get(i)).get(5).toString().trim().equals("ANULADA")){
                    if(((java.util.List)lineas.get(i)).get(5).toString().trim().equals(((java.util.List)lineasAgruparFinal.get(j)).get(5).toString().trim()) &&
                            (!((java.util.List)lineas.get(i)).get(5).toString().trim().isEmpty() && !((java.util.List)lineasAgruparFinal.get(j)).get(5).toString().trim().isEmpty())){
                        encontro = true;
                        break;
                    } else {
                        encontro = false;
                        contador++;
                    }
                } else {
                    encontro = false;
                }
            }
            if (encontro){
                if(!((java.util.List)lineasAgruparFinal.get(contador)).get(5).toString().trim().equals("ANULADA")){
                    ventasRepetidases.get(contador).setContador(ventasRepetidases.get(contador).getContador()+1);
                    
                    ((java.util.List)lineasAgruparFinal.get(contador)).set(7, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(7).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(7).toString())).toPlainString());

                    ((java.util.List)lineasAgruparFinal.get(contador)).set(8, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(8).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(8).toString())).toPlainString());
                    
                    ((java.util.List)lineasAgruparFinal.get(contador)).set(9, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(9).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(9).toString())).toPlainString());

                    ((java.util.List)lineasAgruparFinal.get(contador)).set(10, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(10).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(10).toString())).toPlainString());

                    ((java.util.List)lineasAgruparFinal.get(contador)).set(11, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(11).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(11).toString())).toPlainString());

                    ((java.util.List)lineasAgruparFinal.get(contador)).set(12, new java.math.BigDecimal(((java.util.List)lineasAgruparFinal.get(contador)).get(12).toString()).
                            add(new java.math.BigDecimal(((java.util.List)lineas.get(i)).get(12).toString())).toPlainString());
                }
            } else {
                if(!((java.util.List)lineas.get(i)).get(5).toString().trim().equals("ANULADA")){
                    lineasAgruparFinal.add(lineas.get(i));
                    ventasRepetidases.add(new VentasRepetidas(((java.util.List)lineas.get(i)).get(5).toString(), 1));
                } else {
                    lineasAgruparAnuladas.add(lineas.get(i));
                }
            }
        }
        System.out.println(ventasRepetidases.size());
        for (int i = 1; i < ventasRepetidases.size(); i++){
            if (ventasRepetidases.get(i).getContador()>1){
                System.out.print(ventasRepetidases.get(i) +"\t");
                System.out.println();
            }
        }
    //            //Datos a escribir
    //            java.util.List<String> listaCabecera = new java.util.ArrayList();
    //            java.util.List<String> listaCuerpo = new java.util.ArrayList();
    //            for (int i=0; i<lineasAgruparFinal.size(); i++){
    //                java.util.List<String> columnas = (java.util.List<String>) lineasAgruparFinal.get(i);
    //                listaCuerpo.add(
    //                    "S"+"03"+"¬"+//constante
    //                    "S"+(columnas.get(3).length()==13 ? (columnas.get(3).equals("9999999999999") ? "07" : "04") : columnas.get(3).length()==10 ? "05" : "06")+"¬"+//tpIdCliente
    //                    "S"+columnas.get(3)+"¬"+//idCliente
    //                    "S"+18+"¬"+//tipoComprobante
    //                    "S"+ventasRepetidases.get(i).getContador()+"¬"+//numeroComprobantes
    //                    "D"+0+"¬"+//baseNoGraIva
    //                    "D"+0+"¬"+//baseImponible
    //                    "D"+columnas.get(5)+"¬"+//baseImpGrav
    //                    "D"+columnas.get(6)+"¬"+//montoIva
    //    //                "D"+columnas.get(7)+"¬"+//TOTAL
    //                    "D"+0+"¬"+//valorRetIva
    //                    "D"+0+"¬");//valorRetRenta
    //            }
    //            for (int i=0; i<lineasAgruparAnuladas.size(); i++){
    //                java.util.List<String> columnas = (java.util.List<String>) lineasAgruparAnuladas.get(i);
    //                String tipoComprobante = "";
    //                if (columnas.get(3).equals("F"))//FACTURA
    //                    tipoComprobante = "1";
    //                if (columnas.get(3).equals("NV"))//NOTA DE VENTA
    //                    tipoComprobante = "2";
    //                if (columnas.get(3).equals("LC"))//LIQUIDACION DE COMPRA
    //                    tipoComprobante = "3";
    //                if (columnas.get(3).equals("NC"))//NOTA DE CREDITO
    //                    tipoComprobante = "4";
    //                if (columnas.get(3).equals("ND"))//NOTA DE DEBITO
    //                    tipoComprobante = "5";
    //                if (columnas.get(3).equals("GR"))//GUIA DE REMISION
    //                    tipoComprobante = "6";
    //                if (columnas.get(3).equals("R"))//RETENCIONES
    //                    tipoComprobante = "7";
    //                listaCuerpo.add(
    //                    "S"+"09"+"¬"+//constante
    //                    "S"+tipoComprobante+"¬"+//tipoComprobante
    //                    "S"+establecimiento+"¬"+//establecimiento
    //                    "S"+puntoEmision+"¬"+//puntoEmision
    //                    "I"+columnas.get(1)+"¬"+//secuencialInicio
    //                    "I"+columnas.get(1)+"¬"+//secuencialFin
    //                    "I"+columnas.get(2)+"¬");//autorizacion
    //            }
    ////          Generar el fichero
    //            sri.validaciones.Excel.crearExcel(listaCabecera, listaCuerpo, "Ejemplo", "demo.xls");
    //            sri.validaciones.Fichero.abrirFichero("demo.xls");

        //Datos a escribir
        java.util.List<String> listaCuerpo = new java.util.ArrayList();
        for (int i=0; i<lineasAgruparFinal.size(); i++){
            java.util.List<String> columnas = (java.util.List<String>) lineasAgruparFinal.get(i);
            listaCuerpo.add(
                "03\t"+//constante
                (columnas.get(5).length()==13 ? (columnas.get(5).equals("9999999999999") ? "07" : "04") : columnas.get(5).length()==10 ? "05" : "06")+"\t"+//tpIdCliente
                columnas.get(5)+"\t"+//idCliente
                18+"\t"+//tipoComprobante
                ventasRepetidases.get(i).getContador()+"\t"+//numeroComprobantes
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(7)).add(cero), "#.##")+"\t"+//baseNoGraIva
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(8)).add(cero), "#.##")+"\t"+//baseImponible
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(9)).add(cero), "#.##")+"\t"+//baseImpGrav
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(10)).add(cero), "#.##")+"\t"+//montoIva
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(11)).add(cero), "#.##")+"\t"+//valorRetIva
                redondeoDecimalBigDecimal(new java.math.BigDecimal(columnas.get(12)).add(cero), "#.##")+"\t\n");//valorRetRenta
        }
        for (int i=0; i<lineasAgruparAnuladas.size(); i++){
            java.util.List<String> columnas = (java.util.List<String>) lineasAgruparAnuladas.get(i);
            String tipoComprobante = "";
            if (columnas.get(3).equals("F"))//FACTURA
                tipoComprobante = "1";
            if (columnas.get(3).equals("NV"))//NOTA DE VENTA
                tipoComprobante = "2";
            if (columnas.get(3).equals("LC"))//LIQUIDACION DE COMPRA
                tipoComprobante = "3";
            if (columnas.get(3).equals("NC"))//NOTA DE CREDITO
                tipoComprobante = "4";
            if (columnas.get(3).equals("ND"))//NOTA DE DEBITO
                tipoComprobante = "5";
            if (columnas.get(3).equals("GR"))//GUIA DE REMISION
                tipoComprobante = "6";
            if (columnas.get(3).equals("R"))//RETENCIONES
                tipoComprobante = "7";
            listaCuerpo.add(
                "09"+"\t"+//constante
                tipoComprobante+"\t"+//tipoComprobante
                columnas.get(1)+"\t"+//establecimiento
                columnas.get(2)+"\t"+//puntoEmision
                columnas.get(3)+"\t"+//secuencialInicio
                columnas.get(3)+"\t"+//secuencialFin
                columnas.get(4)+"\t\n");//autorizacion
        }
//          Generar el fichero
        sri.validaciones.Fichero.guardarFichero("ATS.txt", listaCuerpo);
        sri.validaciones.Fichero.abrirFichero("ATS.txt");
        
//        for (int i = 1; i < lineasAgruparAnuladas.size(); i++){
//            System.out.print(lineasAgruparAnuladas.get(i) +"\t");
//            System.out.println();
//        }
//        for (int i = 1; i < lineasAgruparFinal.size(); i++){
//            System.out.print(lineasAgruparFinal.get(i) +"\t");
//            System.out.println();
//        }
    }
    private java.math.BigDecimal cero = new java.math.BigDecimal("0.00");
    private java.math.BigDecimal redondeoDecimalBigDecimal(java.math.BigDecimal d, String formatoR) {
    	java.text.DecimalFormat formato = new java.text.DecimalFormat(formatoR);
    	java.text.DecimalFormatSymbols dfs = formato.getDecimalFormatSymbols();
        dfs.setDecimalSeparator('.');
        formato.setDecimalFormatSymbols(dfs);
    	return java.math.BigDecimal.valueOf(Double.valueOf(formato.format(d)));
    }

    
    private void jbtnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnImportarActionPerformed
        // TODO add your handling code here:
        try {
//            importar("SAATS.xls");
            String ruta = sri.validaciones.Fichero.rutaAbrir();
            if(!ruta.isEmpty()){
                importar(ruta);
            } else
                javax.swing.JOptionPane.showMessageDialog(this, "No selecciono ruta..");
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "No selecciono ruta..");
            e.printStackTrace();
        }
}//GEN-LAST:event_jbtnImportarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SAATS().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbtnImportar;
    // End of variables declaration//GEN-END:variables
}
